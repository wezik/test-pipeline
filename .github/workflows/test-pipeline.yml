name: Trivy scan

on:
  schedule:
    - cron: '0 0 * * *' # Run every 1 day of the month
  workflow_dispatch:

jobs:
  scan:
    name: Scan
    runs-on: ubuntu-22.04
    env:
      AWS_REGION: eu-central-1
      ECR_REPOSITORY: farutex-frontend
      SCAN_FORMAT: json
      FS_SCAN_OUTPUT: fs-scan-results.json
      IMAGE_SCAN_OUTPUT: image-scan-results.json
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy fs scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          output: ${{ env.FS_SCAN_OUTPUT }}
          format: ${{ env.SCAN_FORMAT }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # TODO: add credentials to secrets
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR Image URI and fetch latest tag
        run: |
          REPO_URI=$(\
            aws ecr describe-repositories \
            --repository-names $ECR_REPOSITORY \
            --region $AWS_REGION \
            --query "repositories[0].repositoryUri" \
            --output text)

          IMAGE_TAG=$(aws ecr describe-images \
            --repository-name farutex-frontend \
            --region eu-central-1 \
            --query "sort_by(imageDetails, &imagePushedAt)[-1].imageTags[0]" \
            --output json | jq -r) # Text format loses order of tags so it's a workaround to get the latest tag

          echo "IMAGE_URI=$REPO_URI:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Run Trivy image scan on ECR image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_URI }}
          scan-type: 'image'
          output: ${{ env.IMAGE_SCAN_OUTPUT }}
          format: ${{ env.SCAN_FORMAT }}
          skip-setup-trivy: true

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: 'trivy-scan-results'
          path: |
            ${{ env.FS_SCAN_OUTPUT }}
            ${{ env.IMAGE_SCAN_OUTPUT }}
          retention-days: 1 # TODO: adjust the retention time it is only for testing

      - name: Collect HIGH+ vulnerabilities
        env: 
          FS_SCAN_OUTPUT: ${{ env.FS_SCAN_OUTPUT }}
          IMAGE_SCAN_OUTPUT: ${{ env.IMAGE_SCAN_OUTPUT }}
        run: |
          FS_CRITICAL_COUNT=$(jq '[.. | .Severity? | select(. == "CRITICAL")] | length' $FS_SCAN_OUTPUT)
          FS_HIGH_COUNT=$(jq '[.. | .Severity? | select(. == "HIGH")] | length' $FS_SCAN_OUTPUT)

          FS_RESULT_MSG=":file_folder: *File System Scan:*"

          if [ $FS_HIGH_COUNT -gt 0 ] || [ $FS_CRITICAL_COUNT -gt 0 ]; then
            if [ $FS_HIGH_COUNT -gt 0 ]; then
              FS_RESULT_MSG="$FS_RESULT_MSG $FS_HIGH_COUNT High vulnerabilities :warning:"
            else
              FS_RESULT_MSG="$FS_RESULT_MSG 0 High vulnerabilities :white_check_mark:"
            fi

            if [ $FS_CRITICAL_COUNT -gt 0 ]; then
              FS_RESULT_MSG="$FS_RESULT_MSG $FS_CRITICAL_COUNT Critical vulnerabilities :bangbang:"
            else
              FS_RESULT_MSG="$FS_RESULT_MSG 0 Critical vulnerabilities :white_check_mark:"
            fi
          else
            FS_RESULT_MSG="$FS_RESULT_MSG No High or Critical vulnerabilities found :white_check_mark:"
          fi

          echo "FS_RESULTS_MSG=$FS_RESULTS_MSG" >> $GITHUB_ENV

          IMAGE_CRITICAL_COUNT=$(jq '[.. | .Severity? | select(. == "CRITICAL")] | length' $IMAGE_SCAN_OUTPUT)
          IMAGE_HIGH_COUNT=$(jq '[.. | .Severity? | select(. == "HIGH")] | length' $IMAGE_SCAN_OUTPUT)

          IMAGE_RESULT_MSG=":whale: *Docker Image Scan:*"

          if [ $IMAGE_HIGH_COUNT -gt 0 ] || [ $IMAGE_CRITICAL_COUNT -gt 0 ]; then
            if [ $IMAGE_HIGH_COUNT -gt 0 ]; then
              IMAGE_RESULT_MSG="$IMAGE_RESULT_MSG $IMAGE_HIGH_COUNT High vulnerabilities :warning:"
            else
              IMAGE_RESULT_MSG="$IMAGE_RESULT_MSG 0 High vulnerabilities :white_check_mark:"
            fi

            if [ $IMAGE_CRITICAL_COUNT -gt 0 ]; then
              IMAGE_RESULT_MSG="$IMAGE_RESULT_MSG $IMAGE_CRITICAL_COUNT Critical vulnerabilities :bangbang:"
            else
              IMAGE_RESULT_MSG="$IMAGE_RESULT_MSG 0 Critical vulnerabilities :white_check_mark:"
            fi
          else
            IMAGE_RESULT_MSG="$IMAGE_RESULT_MSG No High or Critical vulnerabilities found :white_check_mark:"
          fi

          echo "IMAGE_RESULTS_MSG=$IMAGE_RESULT_MSG" >> $GITHUB_ENV

      - name: Notify about HIGH+ vulnerabilities
        env:
          FS_RESULTS_MSG: ${{ env.FS_RESULTS_MSG }}
          IMAGE_RESULTS_MSG: ${{ env.IMAGE_RESULTS_MSG }}
          TITLE: ":police_car: *Trivy Scan Results for ${{ env.ECR_REPOSITORY }}!*"
        # uses: slackapi/slack-github-action@v2
        # with:
          # method: chat.postMessage
          # token: ${{ secrets.SLACK_BOT_TOKEN }}
          # payload: |
          #   channel: ${{ secrets.SLACK_BOT_CHANNEL_ID }}
          #   text: ":police_car: Trivy 'fs' scan of frontend\n${{ HIGH_COUNT }} high and ${{ CRITICAL_COUNT }} critical vulnerabilities"
        run: |
          echo "$TITLE"
          echo "$FS_RESULTS_MSG"
          echo "$IMAGE_RESULTS_MSG"


