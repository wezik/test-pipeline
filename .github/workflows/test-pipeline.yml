name: Vulnerability scan

on:
  workflow_dispatch: # Allow manual trigger mostly for testing

jobs:
  scan:
    name: Vulnerability scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Resolve latest image
        id: image-resolver
        run: |
          repo_url=$(aws ecr describe-repositories \
            --repository-names "farutex-frontend" \
            --region "eu-central-1" \
            --query "repositories[0].repositoryUri" \
            --output text)

          image_tag=$(aws ecr describe-images \
            --repository-name "farutex-frontend" \
            --output json \
            | jq -r '.imageDetails
            | map(select(has("imageTags")))
            | max_by(.imagePushedAt)
            | .imageTags[0]')

          echo "::notice ::Latest docker image: $repo_url:$image_tag"
          echo "image_ref=$repo_url:$image_tag" >> "$GITHUB_OUTPUT"

      - name: Scan docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image-resolver.outputs.image_ref }}
          scan-type: 'image'
          output: image-scan-results.json
          format: json

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: 'trivy-scan-results'
          path: image-scan-results.json
          retention-days: 31
          if-no-files-found: error

      - name: Prepare Slack notification
        id: parser
        run: |
          msg="*e-bidfood Frontend* → critical or high vulnerabilities"
          #
          # severity_counts=$(jq -r '[.. | .Severity?] | {
          #   low: (map(select(. == "LOW")) | length),
          #   medium: (map(select(. == "MEDIUM")) | length),
          #   height: (map(select(. == "HIGH")) | length),
          #   critical: (map(select(. == "CRITICAL")) | length)
          # }' image-scan-results.json)
          #
          # low=$(echo "$severity_counts" | jq -r '.low')
          # medium=$(echo "$severity_counts" | jq -r '.medium')
          # high=$(echo "$severity_counts" | jq -r '.high')
          # critical=$(echo "$severity_counts" | jq -r '.critical')

          low=$(jq '[.. | .Severity? | select(. == "LOW")] | length' image-scan-results.json)
          medium=$(jq '[.. | .Severity? | select(. == "MEDIUM")] | length' image-scan-results.json)
          high=$(jq '[.. | .Severity? | select(. == "HIGH")] | length' image-scan-results.json)
          critical=$(jq '[.. | .Severity? | select(. == "CRITICAL")] | length' image-scan-results.json)

          if [ $high -gt 0 ] || [ $critical -gt 0 ]; then
            msg=":oncoming_police_car: $msg <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|detected>"
          else
            msg=":white_check_mark: $msg <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|not detected>"
          fi

          echo "::notice  ::vulnerabilities per severity → low $low / medium $medium / high $high / critical $critical"
          msg="$msg\n:bar_chart: vulnerabilities per severity → low: *$low* / medium: *$medium* / high: *$high* / critical: *$critical*"
          echo "notification_msg=$msg" >> "$GITHUB_OUTPUT"

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v2
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            unfurl_links: false
            channel: ${{ secrets.SLACK_BOT_CHANNEL_ID }}
            text: "${{ steps.parser.outputs.notification_msg }}"
            
